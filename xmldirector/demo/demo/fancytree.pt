<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="xmldirector.plonecore">
      <body>

<metal:javascript fill-slot="javascript_head_slot" tal:define="fbase string:$portal_url/++resource++xmldirector.demo/fancytree">
    <script>
        require = undefined;
        define = undefined;
    </script>
    <script type="text/javascript" src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
    <script type="text/javascript" tal:attributes="src string:$fbase/dist/jquery.fancytree-all.js"></script>
    <script type="text/javascript" tal:attributes="src string:$fbase/3rd-party/extensions/contextmenu/js/jquery.contextMenu-1.6.5.js"></script>
    <script type="text/javascript" tal:attributes="src string:$fbase/3rd-party/extensions/contextmenu/js/jquery.fancytree.contextMenu.js"></script>
    <link rel="stylesheet" 
          type="text/css" 
          tal:attributes="href string:$fbase/dist/skin-lion/ui.fancytree.css" />
    <link rel="stylesheet" 
          type="text/css" 
          tal:attributes="href string:$fbase/3rd-party/extensions/contextmenu/css/jquery.contextMenu.css"/>
</metal:javascript>

<metal:main fill-slot="content-core">
    <metal:content-core define-macro="content-core">
        <h1>Fancytree demo</h1>

        <div style="float: left; width: 40%">
            <h2>Content repository</h2>
            <div id="tree1">
              <ul id="treeData1" style="display: none;">
                <li class="src-node" id="doc-1">Document 1</li>
                <li class="src-node" id="doc-2">Document 2</li>
                <li class="src-node" id="doc-3">Document 3</li>
                <li class="src-node folder" id="aaa">Topics AAA
                  <ul>
                      <li class="src-node" id="a1">Topic A1</li>
                      <li class="src-node" id="a2">Topic A2</li>
                  </ul>
                </li>
                <li class="src-node folder" id="bbb">Topics BBB
                  <ul>
                      <li class="src-node" id="b1">Topic B1</li>
                      <li class="src-node" id="b2">Topic B2</li>
                  </ul>
                </li>
              </ul>
            </div>
        </div>

        <div style="float: left; width: 40%">
            <h2>Map</h2>
            <div id="tree2">
              <ul id="treeData2" style="display: none;">
                <li class="target-node folder" id="2-2">Folder 2
                  <ul>
                      <li class="target-node" id="2-3">Node 2.1</li>
                      <li class="target-node" id="2-4">Node 2.2</li>
                  </ul>
                </li>
              </ul>
            </div>
        </div>

        <div style="clear: both"></div>

      <script type="text/javascript">

        function menu_rename(action, data) {
            var node = $.ui.fancytree.getNode(data.$trigger);
            var title = node.title;
            var new_title = prompt('Rename', title);
            if (new_title != null) 
                node.setTitle(new_title);
        }

        function menu_delete(action, data) {
            var node = $.ui.fancytree.getNode(data.$trigger);
            node.remove();
        }

        function menu_add_folder(action, data) {
            var node = $.ui.fancytree.getNode(data.$trigger);
            var title = prompt('Folder name', '');
            if (title != null) 
                node.addChildren({title: title, folder: true});
        }

        function menu_add_item(action, data) {
            var node = $.ui.fancytree.getNode(data.$trigger);
            var title = prompt('Item name', '');
            node.addChildren({title: title, folder: false});
        }

        function is_src_node(node) {
            return (node.extraClasses || '').indexOf('src-node') > -1;
        }


        function set_target_class(node) {
            node.visit(function(n) {
                n.addClass('target-node');             
            });
        }

        var dnd = {
          draggable: {
            scroll: false
          },
          autoExpandMS: 400,
          focusOnClick: true,
          preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
          preventRecursiveMoves: true, // Prevent dropping nodes on own descendants
          dragStart: function(node, data) {
            return true;
          },

          dragEnter: function(node, data) {
              return true;
          },
          dragOver: function(node, data) {

              /* No DnD within the src tree */
              if (is_src_node(node) && is_src_node(data.otherNode)) {
                  return false;
              }

            /** data.otherNode may be null for non-fancytree droppables.
             *  Return false to disallow dropping on node. In this case
             *  dragOver and dragLeave are not called.
             *  Return 'over', 'before, or 'after' to force a hitMode.
             *  Return ['before', 'after'] to restrict available hitModes.
             *  Any other return value will calc the hitMode from the cursor position.
             */
            // Prevent dropping a parent below another parent (only sort
            // nodes under the same parent)
            /*         
                if(node.parent !== data.otherNode.parent){
                    return false;
                }
                // Don't allow dropping *over* a node (would create a child)
                return ["before", "after"];
            */
             return true;
          },
          dragDrop: function(target_node, data) {
            var new_node = null;
            var source_node = data.otherNode;
            var source_class = (source_node.extraClasses || '').indexOf('src-node') > -1 ? 'src' : 'target';
            var target_class = (target_node.extraClasses || '').indexOf('src-node') > -1 ? 'src' : 'target';
            if (source_class == 'src' && target_class == 'target') {
                new_node = data.otherNode.copyTo(target_node, data.hitMode);
                new_node.removeClass('src-node');
                set_target_class(data.otherNode);
                target_node.setExpanded(true);
            } else if (source_class == 'target' && target_class == 'target') {
                /* DnD 'over' only on folder nodes */
                if (data.hitMode == 'over' && !target_node.folder) {
                    return false;
                }
                new_node = data.otherNode.moveTo(target_node, data.hitMode);
                target_node.setExpanded(true);
            } else {
                alert('Can not move nodes from target to source');
                return false;
            }
          }
        }

        $(function(){

            $("#tree1").fancytree({ 
              extensions: ["dnd"],
              dnd: dnd
            });
            
            $("#tree2").fancytree({ 
              extensions: ["dnd", "edit", "contextMenu"],
              dnd: dnd,
              contextMenu: {
                  menu: {
                      'Rename': { 'name': 'Rename', 'icon': 'edit', callback: menu_rename },
                      'Remove': { 'name': 'Delete', 'icon': 'delete', callback: menu_delete },
                      'Add Folder': { 'name': 'Add Folder', 'icon': 'add', callback: menu_add_folder},
                      'Add item': { 'name': 'Add item', 'icon': 'add', callback: menu_add_item},
                  },
              }
          });

        });
      </script>       
  </metal:content-core>
</metal:main>

</body>
</html>

