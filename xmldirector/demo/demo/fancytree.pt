<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      lang="en"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="xmldirector.plonecore">
      <body>


<metal:javascript fill-slot="javascript_head_slot">
  <script>
      require = undefined;
      define = undefined;
  </script>
  <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js" type="text/javascript"></script>
  <script src="++resource++xmldirector.demo/fancytree/dist/jquery.fancytree-all.js" type="text/javascript"></script>

</metal:javascript>

<metal:main fill-slot="content-core">
    <metal:content-core define-macro="content-core">
        <link rel="stylesheet" type="text/css" href="++resource++xmldirector.demo/fancytree/dist/skin-xp/ui.fancytree.css" />

        <h1>Fancytree demo</h1>

        <div id="tree1" class="tree" style="float: left; width: 40%">
          <ul id="treeData" style="display: none;">
            <li id="1">Node 1
            <li id="2" class="folder">Folder 2
              <ul>
                <li id="3">Node 2.1
                <li id="4">Node 2.2
              </ul>
          </ul>
        </div>

        <div id="tree2" class="tree" style="float: left; width: 40%">
          <ul id="treeData2" style="display: none;">
            <li id="2-1">Node 1
            <li id="2-2" class="folder">Folder 2
              <ul>
                <li id="2-3">Node 2.1
                <li id="2-4">Node 2.2
              </ul>
          </ul>
        </div>

        <div style="clear: both"></div>

      <script type="text/javascript">
        $(function(){
          // Create the tree inside the <div id="tree"> element.
              $(".tree").fancytree({ 
              extensions: ["dnd", "edit"],

      dnd: {
        autoExpandMS: 400,
        focusOnClick: true,
        preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.
        preventRecursiveMoves: true, // Prevent dropping nodes on own descendants
        dragStart: function(node, data) {
          /** This function MUST be defined to enable dragging for the tree.
           *  Return false to cancel dragging of node.
           */
          return true;
        },
        dragEnter: function(node, data) {
          /** data.otherNode may be null for non-fancytree droppables.
           *  Return false to disallow dropping on node. In this case
           *  dragOver and dragLeave are not called.
           *  Return 'over', 'before, or 'after' to force a hitMode.
           *  Return ['before', 'after'] to restrict available hitModes.
           *  Any other return value will calc the hitMode from the cursor position.
           */
          // Prevent dropping a parent below another parent (only sort
          // nodes under the same parent)
/*           if(node.parent !== data.otherNode.parent){
            return false;
          }
          // Don't allow dropping *over* a node (would create a child)
          return ["before", "after"];
*/
           return true;
        },
        dragDrop: function(node, data) {
          /** This function MUST be defined to enable dropping of items on
           *  the tree.
           */
          data.otherNode.moveTo(node, data.hitMode);
        }
      },
 
            });
        });
      </script>       
  </metal:content-core>
</metal:main>

</body>
</html>

